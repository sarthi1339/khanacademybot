const {MongoClient}    = require("mongodb");
const fs               = require("fs");
const path             = require("path");
const pathToBotConfig  = path.join(process.cwd(), ".botconfig");
const PropertiesReader = require("properties-reader");
const DB_TYPE_MONGO    = "mongo";

class MongoProperties {
    constructor() {
        this.botConfigExists = fs.existsSync(pathToBotConfig);
        if (this.botConfigExists) {
            this.botConfig = PropertiesReader(pathToBotConfig);
        }
    }

    shouldUseMongo() {
        return this.botConfigExists && this.botConfig && this.botConfig.get("useDB") === DB_TYPE_MONGO;
    }

    connectionURL() {
        return this.botConfigExists && this.botConfig && this.botConfig.get("connectionURL");
    }

    botName() {
        return this.botConfigExists && this.botConfig && this.botConfig.get("botName");
    }
}

class GSMongoDBHandler {

    constructor() {
        this.properties      = new MongoProperties();
        this.DB_NAME         = "botdata";
        this.COLLECTION_NAME = this.properties.botName() || "commonBotData";

        if (!this.properties.shouldUseMongo()) {
            throw new Error("`useDB` is Not Set To Mongo");
        }

        this.validateClient().then(() => {
            return this.validateDatabase();
        }).then(() => {
            return this.createCollection();
        });

    }


    async get(key = "") {
        await this.validateClient();
        return await this.database.collection(this.COLLECTION_NAME).findOne({key: key});
    }

    async put(key = "", value = {}) {
        await this.validateClient();

        await this.database.collection(this.COLLECTION_NAME).updateOne({key: key}, {
            $set: {
                key  : key,
                value: value
            }
        }, {upsert: true})
    }

    async validateClient() {
        if (this.client && this.client.isConnected()) {
            return;
        }

        this.client = new MongoClient(this.properties.connectionURL());
        await this.client.connect();
        await this.validateConnection();
    }

    validateDatabase() {
        this.database = this.client.db(this.DB_NAME);
    }


    async validateConnection() {
        try {
            await this.client.db("admin").command({ping: 1});
        } catch (e) {
            console.error("Exception While Validating DB Connection");
        }
    }

    async createCollection() {
        if (this.database) {
            let availableCollections = await this.database.listCollections({}, {
                nameOnly: true
            }).toArray();

            let foundBotDataCollection = false;

            for (let collection of availableCollections) {
                if (collection.name === this.COLLECTION_NAME) {
                    foundBotDataCollection = true;
                    break;
                }
            }

            if (!foundBotDataCollection) {
                await this.database.createCollection(this.COLLECTION_NAME);
            }
        }
    }
}

module.exports = {
    MongoProperties, GSMongoDBHandler
}